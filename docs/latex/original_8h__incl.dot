digraph "src/original.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="src/original.h",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Main header file for Original."];
  Node1 -> Node2 [id="edge143_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="core/core.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$core_8h.html",tooltip="Core module header file."];
  Node2 -> Node3 [id="edge144_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="algorithms.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8h.html",tooltip="Standard algorithm implementations for iterator-based containers."];
  Node3 -> Node4 [id="edge145_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="functional",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node3 -> Node5 [id="edge146_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="cmath",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node3 -> Node6 [id="edge147_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="vector.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$vector_8h.html",tooltip="Dynamic array container with automatic resizing."];
  Node6 -> Node7 [id="edge148_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="baseList.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_list_8h.html",tooltip="Provides a base class for variable-size serial containers."];
  Node7 -> Node8 [id="edge149_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="serial.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$serial_8h.html",tooltip="Defines an abstract base class for sequential containers with index-based access."];
  Node8 -> Node9 [id="edge150_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="container.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$container_8h.html",tooltip="Abstract base class for container types."];
  Node9 -> Node10 [id="edge151_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="config.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$config_8h.html",tooltip="Platform-independent integer type definitions."];
  Node10 -> Node11 [id="edge152_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="cstdint",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node6 -> Node12 [id="edge153_Node000006_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="iterationStream.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$iteration_stream_8h.html",tooltip="Provides functionality for an iteration stream."];
  Node12 -> Node14 [id="edge154_Node000012_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="comparable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$comparable_8h.html",tooltip="Interface for objects that can be compared."];
  Node14 -> Node10 [id="edge155_Node000014_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node14 -> Node15 [id="edge156_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="compare",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node12 -> Node16 [id="edge157_Node000012_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="printable.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$printable_8h.html",tooltip="Interface for polymorphic string formatting and output."];
  Node12 -> Node18 [id="edge158_Node000012_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="iterable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iterable_8h.html",tooltip="Base interface for iterable container types."];
  Node18 -> Node19 [id="edge159_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="transform.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$transform_8h.html",tooltip="Transformation classes for various operations on elements."];
  Node19 -> Node7 [id="edge160_Node000019_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node20 [id="edge161_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="cloneable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$cloneable_8h.html",tooltip="Abstract base class for cloneable objects."];
  Node19 -> Node21 [id="edge162_Node000019_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="maths.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$maths_8h.html",tooltip="Mathematical utilities and constants."];
  Node21 -> Node22 [id="edge163_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="error.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$error_8h.html",tooltip="Custom exception classes and callback validation utilities."];
  Node22 -> Node23 [id="edge164_Node000022_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="exception",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node22 -> Node24 [id="edge165_Node000022_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="types.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$types_8h.html",tooltip="Type system foundations and concept definitions."];
  Node18 -> Node24 [id="edge166_Node000018_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node27 [id="edge167_Node000018_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="iterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iterator_8h.html",tooltip="Defines the iterator class for traversing and manipulating container elements."];
  Node27 -> Node20 [id="edge168_Node000027_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node14 [id="edge169_Node000027_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node22 [id="edge170_Node000027_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node16 [id="edge171_Node000027_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node24 [id="edge172_Node000012_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node28 [id="edge173_Node000006_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="array.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$array_8h.html",tooltip="Provides the array class for a fixed-size container with random access."];
  Node28 -> Node29 [id="edge174_Node000028_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="initializer_list",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node28 -> Node10 [id="edge175_Node000028_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node28 -> Node30 [id="edge176_Node000028_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="baseArray.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_array_8h.html",tooltip="Provides a base class for fixed-size serial containers."];
  Node30 -> Node8 [id="edge177_Node000030_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node28 -> Node12 [id="edge178_Node000028_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node28 -> Node31 [id="edge179_Node000028_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="randomAccessIterator.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$random_access_iterator_8h.html",tooltip="Base class for random-access iterators."];
  Node31 -> Node9 [id="edge180_Node000031_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node22 [id="edge181_Node000031_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node27 [id="edge182_Node000031_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node28 -> Node22 [id="edge183_Node000028_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node33 [id="edge184_Node000003_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="filter.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$filter_8h.html",tooltip="Filter base class and derived filter classes for various matching operations."];
  Node33 -> Node20 [id="edge185_Node000033_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node27 [id="edge186_Node000003_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node24 [id="edge187_Node000003_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node28 [id="edge188_Node000002_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node34 [id="edge189_Node000002_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="autoPtr.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$auto_ptr_8h.html",tooltip="Base class for reference-counted smart pointers."];
  Node34 -> Node10 [id="edge190_Node000034_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node16 [id="edge191_Node000034_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node14 [id="edge192_Node000034_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node22 [id="edge193_Node000034_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node30 [id="edge194_Node000002_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node7 [id="edge195_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node35 [id="edge196_Node000002_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="bitSet.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$bit_set_8h.html",tooltip="BitSet class declaration."];
  Node35 -> Node28 [id="edge197_Node000035_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node35 -> Node36 [id="edge198_Node000035_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="couple.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$couple_8h.html",tooltip="Generic pair container implementation."];
  Node36 -> Node16 [id="edge199_Node000036_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node36 -> Node14 [id="edge200_Node000036_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node36 -> Node24 [id="edge201_Node000036_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node36 -> Node22 [id="edge202_Node000036_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node35 -> Node12 [id="edge203_Node000035_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node37 [id="edge204_Node000002_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="blocksList.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$blocks_list_8h.html",tooltip="A block-based list implementation."];
  Node37 -> Node7 [id="edge205_Node000037_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node36 [id="edge206_Node000037_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node6 [id="edge207_Node000037_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node38 [id="edge208_Node000002_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="chain.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$chain_8h.html",tooltip="Non-cyclic doubly linked list implementation."];
  Node38 -> Node39 [id="edge209_Node000038_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="doubleDirectionIterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$double_direction_iterator_8h.html",tooltip="Double-direction iterator base class."];
  Node39 -> Node40 [id="edge210_Node000039_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="stepIterator.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$step_iterator_8h.html",tooltip="Step iterator base class for single-step iterators."];
  Node40 -> Node27 [id="edge211_Node000040_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node40 -> Node41 [id="edge212_Node000040_Node000041",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="wrapper.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$wrapper_8h.html",tooltip="Abstract polymorphic container with value encapsulation and navigation support."];
  Node41 -> Node16 [id="edge213_Node000041_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node40 -> Node22 [id="edge214_Node000040_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node40 -> Node21 [id="edge215_Node000040_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node38 -> Node28 [id="edge216_Node000038_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node38 -> Node7 [id="edge217_Node000038_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node38 -> Node12 [id="edge218_Node000038_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node20 [id="edge219_Node000002_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node14 [id="edge220_Node000002_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node43 [id="edge221_Node000002_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="comparator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$comparator_8h.html",tooltip="Comparator base class and concrete comparator classes."];
  Node43 -> Node24 [id="edge222_Node000043_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node10 [id="edge223_Node000002_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node9 [id="edge224_Node000002_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node44 [id="edge225_Node000002_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="containerAdapter.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$container_adapter_8h.html",tooltip="Base class for container adapters with common interfaces."];
  Node44 -> Node7 [id="edge226_Node000044_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node44 -> Node24 [id="edge227_Node000044_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node44 -> Node16 [id="edge228_Node000044_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node44 -> Node14 [id="edge229_Node000044_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node36 [id="edge230_Node000002_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node45 [id="edge231_Node000002_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="deleter.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$deleter_8h.html",tooltip="Default deleters for resource management."];
  Node2 -> Node46 [id="edge232_Node000002_Node000046",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="deque.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$deque_8h.html",tooltip="Double-ended queue (deque) container adapter implementation."];
  Node46 -> Node38 [id="edge233_Node000046_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node46 -> Node44 [id="edge234_Node000046_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node39 [id="edge235_Node000002_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node22 [id="edge236_Node000002_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node33 [id="edge237_Node000002_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node47 [id="edge238_Node000002_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="filterStream.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$filter_stream_8h.html",tooltip="Composite filter operations with logical chaining."];
  Node47 -> Node33 [id="edge239_Node000047_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node47 -> Node38 [id="edge240_Node000047_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node48 [id="edge241_Node000002_Node000048",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="forwardChain.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$forward_chain_8h.html",tooltip="Non-cyclic singly linked list implementation."];
  Node48 -> Node49 [id="edge242_Node000048_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="singleDirectionIterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$single_direction_iterator_8h.html",tooltip="Single-direction iterator base class."];
  Node49 -> Node40 [id="edge243_Node000049_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node28 [id="edge244_Node000048_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node7 [id="edge245_Node000048_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node18 [id="edge246_Node000002_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node12 [id="edge247_Node000002_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node27 [id="edge248_Node000002_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node21 [id="edge249_Node000002_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node50 [id="edge250_Node000002_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="ownerPtr.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$owner_ptr_8h.html",tooltip="Exclusive-ownership smart pointer implementation."];
  Node50 -> Node34 [id="edge251_Node000050_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node50 -> Node45 [id="edge252_Node000050_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node16 [id="edge253_Node000002_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node52 [id="edge254_Node000002_Node000052",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="prique.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$prique_8h.html",tooltip="Priority queue container implementation."];
  Node52 -> Node3 [id="edge255_Node000052_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node52 -> Node37 [id="edge256_Node000052_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node52 -> Node43 [id="edge257_Node000052_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node52 -> Node44 [id="edge258_Node000052_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node52 -> Node24 [id="edge259_Node000052_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node53 [id="edge260_Node000002_Node000053",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="queue.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$queue_8h.html",tooltip="Queue container adapter implementation."];
  Node53 -> Node44 [id="edge261_Node000053_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node53 -> Node38 [id="edge262_Node000053_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node31 [id="edge263_Node000002_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node54 [id="edge264_Node000002_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="refCntPtr.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ref_cnt_ptr_8h.html",tooltip="Reference-counted smart pointer hierarchy."];
  Node54 -> Node34 [id="edge265_Node000054_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node54 -> Node45 [id="edge266_Node000054_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node8 [id="edge267_Node000002_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node49 [id="edge268_Node000002_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node55 [id="edge269_Node000002_Node000055",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="stack.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$stack_8h.html",tooltip="Stack container adapter implementation."];
  Node55 -> Node38 [id="edge270_Node000055_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node55 -> Node44 [id="edge271_Node000055_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node40 [id="edge272_Node000002_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node19 [id="edge273_Node000002_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node56 [id="edge274_Node000002_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="transformStream.h",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$transform_stream_8h.html",tooltip="Transform pipeline composition and execution."];
  Node56 -> Node19 [id="edge275_Node000056_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node56 -> Node38 [id="edge276_Node000056_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node57 [id="edge277_Node000002_Node000057",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="tuple.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$tuple_8h.html",tooltip="Heterogeneous tuple container implementation."];
  Node57 -> Node16 [id="edge278_Node000057_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node57 -> Node14 [id="edge279_Node000057_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node57 -> Node36 [id="edge280_Node000057_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node57 -> Node24 [id="edge281_Node000057_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node24 [id="edge282_Node000002_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node6 [id="edge283_Node000002_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node41 [id="edge284_Node000002_Node000041",color="steelblue1",style="solid",tooltip=" "];
}
