digraph "src/core/array.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="src/core/array.h",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Provides the array class for a fixed-size container with random access."];
  Node1 -> Node2 [id="edge40_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="initializer_list",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node3 [id="edge41_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="config.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$config_8h.html",tooltip="Platform-independent integer type definitions."];
  Node3 -> Node4 [id="edge42_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="cstdint",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node5 [id="edge43_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="baseArray.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_array_8h.html",tooltip="Provides a base class for fixed-size serial containers."];
  Node5 -> Node6 [id="edge44_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="serial.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$serial_8h.html",tooltip="Defines an abstract base class for sequential containers with index-based access."];
  Node6 -> Node7 [id="edge45_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="container.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$container_8h.html",tooltip="Abstract base class for container types."];
  Node7 -> Node3 [id="edge46_Node000007_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node8 [id="edge47_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="iterationStream.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iteration_stream_8h.html",tooltip="Provides functionality for an iteration stream."];
  Node8 -> Node9 [id="edge48_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="sstream",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node8 -> Node10 [id="edge49_Node000008_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="comparable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$comparable_8h.html",tooltip="Interface for objects that can be compared."];
  Node10 -> Node3 [id="edge50_Node000010_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node11 [id="edge51_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="compare",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node8 -> Node12 [id="edge52_Node000008_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="printable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$printable_8h.html",tooltip="Interface for polymorphic string formatting and output."];
  Node12 -> Node13 [id="edge53_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="memory",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node12 -> Node9 [id="edge54_Node000012_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node14 [id="edge55_Node000008_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="iterable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iterable_8h.html",tooltip="Base interface for iterable container types."];
  Node14 -> Node15 [id="edge56_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="transform.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$transform_8h.html",tooltip="Transformation classes for various operations on elements."];
  Node15 -> Node16 [id="edge57_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="baseList.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_list_8h.html",tooltip="Provides a base class for variable-size serial containers."];
  Node16 -> Node6 [id="edge58_Node000016_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node15 -> Node17 [id="edge59_Node000015_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="cloneable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$cloneable_8h.html",tooltip="Abstract base class for cloneable objects."];
  Node15 -> Node18 [id="edge60_Node000015_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="maths.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$maths_8h.html",tooltip="Mathematical utilities and constants."];
  Node18 -> Node19 [id="edge61_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="error.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$error_8h.html",tooltip="Custom exception classes and callback validation utilities."];
  Node19 -> Node20 [id="edge62_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="exception",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node19 -> Node21 [id="edge63_Node000019_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="types.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$types_8h.html",tooltip="Type system foundations and concept definitions."];
  Node21 -> Node22 [id="edge64_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="type_traits",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node21 -> Node23 [id="edge65_Node000021_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="concepts",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node14 -> Node21 [id="edge66_Node000014_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node14 -> Node24 [id="edge67_Node000014_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="iterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iterator_8h.html",tooltip="Defines the iterator class for traversing and manipulating container elements."];
  Node24 -> Node17 [id="edge68_Node000024_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node10 [id="edge69_Node000024_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node19 [id="edge70_Node000024_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node12 [id="edge71_Node000024_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node21 [id="edge72_Node000008_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node25 [id="edge73_Node000001_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="randomAccessIterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$random_access_iterator_8h.html",tooltip="Base class for random-access iterators."];
  Node25 -> Node7 [id="edge74_Node000025_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node19 [id="edge75_Node000025_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node24 [id="edge76_Node000025_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node26 [id="edge77_Node000025_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="limits",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node19 [id="edge78_Node000001_Node000019",color="steelblue1",style="solid",tooltip=" "];
}
