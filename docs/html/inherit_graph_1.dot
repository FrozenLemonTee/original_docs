digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [id="Node000000",label="original::baseCloneable\l\< cloneable \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_cloneable.html",tooltip=" "];
  Node0 -> Node1 [id="edge1_Node000000_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 [id="Node000001",label="original::cloneable",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1cloneable.html",tooltip="Concrete cloneable class with custom cloning behavior."];
  Node1 -> Node2 [id="edge2_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="original::iterator\l\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterator.html",tooltip=" "];
  Node2 -> Node3 [id="edge3_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="original::baseIterator\l\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_iterator.html",tooltip=" "];
  Node3 -> Node4 [id="edge4_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="original::bitSet::Iterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1bit_set_1_1_iterator.html",tooltip="An iterator for traversing the bits in a bitSet."];
  Node1 -> Node95 [id="edge5_Node000001_Node000095",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node95 [id="Node000095",label="original::filter\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1filter.html",tooltip="Base class for filter operations."];
  Node95 -> Node96 [id="edge6_Node000095_Node000096",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node96 [id="Node000096",label="original::equalFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1equal_filter.html",tooltip="A filter that checks if an element is equal to a target value."];
  Node95 -> Node97 [id="edge7_Node000095_Node000097",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node97 [id="Node000097",label="original::greaterFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1greater_filter.html",tooltip="A filter that checks if an element is greater than a target value."];
  Node95 -> Node98 [id="edge8_Node000095_Node000098",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node98 [id="Node000098",label="original::lessFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1less_filter.html",tooltip="A filter that checks if an element is less than a target value."];
  Node95 -> Node99 [id="edge9_Node000095_Node000099",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node99 [id="Node000099",label="original::notEqualFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1not_equal_filter.html",tooltip="A filter that checks if an element is not equal to a target value."];
  Node95 -> Node100 [id="edge10_Node000095_Node000100",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node100 [id="Node000100",label="original::notGreaterFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1not_greater_filter.html",tooltip="A filter that checks if an element is less than or equal to a target value."];
  Node95 -> Node101 [id="edge11_Node000095_Node000101",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node101 [id="Node000101",label="original::notLessFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1not_less_filter.html",tooltip="A filter that checks if an element is greater than or equal to a target value."];
  Node95 -> Node102 [id="edge12_Node000095_Node000102",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node102 [id="Node000102",label="original::rangeFilter\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1range_filter.html",tooltip="A filter that checks if an element lies within a specified range."];
  Node1 -> Node5 [id="edge13_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="original::iterator\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterator.html",tooltip="Base iterator interface that supports common operations for iteration."];
  Node5 -> Node3 [id="edge14_Node000005_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node6 [id="edge15_Node000005_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="original::baseIterator\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_iterator.html",tooltip="A base class for basic iterators."];
  Node6 -> Node7 [id="edge16_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="original::blocksList\l\< TYPE \>::Iterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1blocks_list_1_1_iterator.html",tooltip="Iterator for blocksList, supports forward and backward iteration."];
  Node6 -> Node8 [id="edge17_Node000006_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="original::randomAccessIterator\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1random_access_iterator.html",tooltip="Abstract base class for random-access iterators."];
  Node8 -> Node9 [id="edge18_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="original::array\< TYPE\l \>::Iterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1array_1_1_iterator.html",tooltip="Iterator for the array class that supports random access."];
  Node8 -> Node10 [id="edge19_Node000008_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="original::vector\< TYPE\l \>::Iterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1vector_1_1_iterator.html",tooltip="Random access iterator implementation for vector."];
  Node6 -> Node11 [id="edge20_Node000006_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="original::stepIterator\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1step_iterator.html",tooltip="Abstract base class for step iterators."];
  Node11 -> Node12 [id="edge21_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="original::doubleDirection\lIterator\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1double_direction_iterator.html",tooltip="Abstract base class for double-direction iterators."];
  Node12 -> Node13 [id="edge22_Node000012_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="original::chain\< TYPE\l \>::Iterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1chain_1_1_iterator.html",tooltip="Bidirectional iterator implementation for chain."];
  Node11 -> Node14 [id="edge23_Node000011_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="original::singleDirection\lIterator\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1single_direction_iterator.html",tooltip="Abstract base class for single-direction iterators."];
  Node14 -> Node15 [id="edge24_Node000014_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="original::forwardChain\l\< TYPE \>::Iterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1forward_chain_1_1_iterator.html",tooltip="Iterator for forwardChain, supports single-direction traversal."];
  Node5 -> Node16 [id="edge25_Node000005_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="original::iterable\l\< TYPE \>::iterAdaptor",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterable_1_1iter_adaptor.html",tooltip="An iterator adapter for the iterable container."];
  Node1 -> Node103 [id="edge26_Node000001_Node000103",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node103 [id="Node000103",label="original::transform\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1transform.html",tooltip="Base class for transformation operations."];
  Node103 -> Node104 [id="edge27_Node000103_Node000104",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node104 [id="Node000104",label="original::absTransform\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1abs_transform.html",tooltip="Transformation that converts an element to its absolute value."];
  Node103 -> Node105 [id="edge28_Node000103_Node000105",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node105 [id="Node000105",label="original::addOptTransform\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1add_opt_transform.html",tooltip="Transformation that adds a given value to an element."];
  Node103 -> Node106 [id="edge29_Node000103_Node000106",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node106 [id="Node000106",label="original::assignOptTransform\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1assign_opt_transform.html",tooltip="Transformation that assigns a specified value to an element."];
  Node103 -> Node107 [id="edge30_Node000103_Node000107",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node107 [id="Node000107",label="original::copyTransform\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1copy_transform.html",tooltip="Transformation that copies an element into a container."];
  Node103 -> Node108 [id="edge31_Node000103_Node000108",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node108 [id="Node000108",label="original::multiOptTransform\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1multi_opt_transform.html",tooltip="Transformation that multiplies an element by a given value."];
  Node88 [id="Node000088",label="original::comparable\l\< autoPtr\< TYPE, DERIVED,\l DELETER \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node88 -> Node85 [id="edge32_Node000088_Node000085",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node85 [id="Node000085",label="original::autoPtr\<\l TYPE, DERIVED, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1auto_ptr.html",tooltip="Base smart pointer with reference counting."];
  Node85 -> Node86 [id="edge33_Node000085_Node000086",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node86 [id="Node000086",label="original::ownerPtr\l\< TYPE, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1owner_ptr.html",tooltip="Unique ownership smart pointer with move semantics."];
  Node85 -> Node87 [id="edge34_Node000085_Node000087",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node87 [id="Node000087",label="original::refCntPtr\l\< TYPE, DERIVED, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1ref_cnt_ptr.html",tooltip="Base class for reference-counted pointers."];
  Node20 [id="Node000020",label="original::comparable\l\< autoPtr\< TYPE, ownerPtr\l\< TYPE, deleter\< TYPE \>\l \>, deleter\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node20 -> Node19 [id="edge35_Node000020_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="original::autoPtr\<\l TYPE, ownerPtr\< TYPE,\l deleter\< TYPE \> \>, deleter\l\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1auto_ptr.html",tooltip=" "];
  Node24 [id="Node000024",label="original::comparable\l\< autoPtr\< TYPE, strongPtr\l\< TYPE, DELETER \>, DELETER \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node24 -> Node21 [id="edge36_Node000024_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="original::autoPtr\<\l TYPE, strongPtr\< TYPE,\l DELETER \>, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1auto_ptr.html",tooltip=" "];
  Node21 -> Node22 [id="edge37_Node000021_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="original::refCntPtr\l\< TYPE, strongPtr\< TYPE,\l DELETER \>, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1ref_cnt_ptr.html",tooltip=" "];
  Node22 -> Node23 [id="edge38_Node000022_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="original::strongPtr\l\< TYPE, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1strong_ptr.html",tooltip="Shared ownership smart pointer with strong references."];
  Node28 [id="Node000028",label="original::comparable\l\< autoPtr\< TYPE, weakPtr\l\< TYPE, DELETER \>, DELETER \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node28 -> Node25 [id="edge39_Node000028_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="original::autoPtr\<\l TYPE, weakPtr\< TYPE,\l DELETER \>, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1auto_ptr.html",tooltip=" "];
  Node25 -> Node26 [id="edge40_Node000025_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="original::refCntPtr\l\< TYPE, weakPtr\< TYPE,\l DELETER \>, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1ref_cnt_ptr.html",tooltip=" "];
  Node26 -> Node27 [id="edge41_Node000026_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="original::weakPtr\<\l TYPE, DELETER \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1weak_ptr.html",tooltip="Non-owning reference to shared resource."];
  Node37 [id="Node000037",label="original::comparable\l\< containerAdapter\< TYPE,\l blocksList \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node37 -> Node35 [id="edge42_Node000037_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="original::containerAdapter\l\< TYPE, blocksList \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container_adapter.html",tooltip=" "];
  Node35 -> Node36 [id="edge43_Node000035_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="original::prique\< TYPE,\l Callback, SERIAL \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1prique.html",tooltip="Heap-based priority queue container."];
  Node33 [id="Node000033",label="original::comparable\l\< containerAdapter\< TYPE,\l chain \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node33 -> Node29 [id="edge44_Node000033_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="original::containerAdapter\l\< TYPE, chain \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container_adapter.html",tooltip=" "];
  Node29 -> Node30 [id="edge45_Node000029_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="original::deque\< TYPE,\l SERIAL \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1deque.html",tooltip="Double-ended queue container adapter."];
  Node29 -> Node31 [id="edge46_Node000029_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="original::queue\< TYPE,\l SERIAL \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1queue.html",tooltip="First-In-First-Out (FIFO) container adapter <TYPE, SERIAL>"];
  Node29 -> Node32 [id="edge47_Node000029_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="original::stack\< TYPE,\l SERIAL \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1stack.html",tooltip="Last-In-First-Out (LIFO) container adapter <TYPE, SERIAL>"];
  Node39 [id="Node000039",label="original::comparable\l\< containerAdapter\< TYPE,\l SERIAL \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node39 -> Node38 [id="edge48_Node000039_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="original::containerAdapter\l\< TYPE, SERIAL \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container_adapter.html",tooltip="Adapter class that provides unified interface for various container types."];
  Node90 [id="Node000090",label="original::comparable\l\< couple\< F_TYPE, S_TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node90 -> Node89 [id="edge49_Node000090_Node000089",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node89 [id="Node000089",label="original::couple\< F\l_TYPE, S_TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1couple.html",tooltip="Container for two heterogeneous elements."];
  Node69 [id="Node000069",label="original::comparable\l\< iterationStream\< bool,\l bitSet \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node69 -> Node64 [id="edge50_Node000069_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="original::iterationStream\l\< bool, bitSet \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node64 -> Node65 [id="edge51_Node000064_Node000065",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="original::bitSet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1bit_set.html",tooltip="A class representing a set of bits, offering functionality to manipulate and query individual bits."];
  Node83 [id="Node000083",label="original::comparable\l\< iterationStream\< opts,\l chain\< opts \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node83 -> Node78 [id="edge52_Node000083_Node000078",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node78 [id="Node000078",label="original::iterationStream\l\< opts, chain\< opts \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node78 -> Node79 [id="edge53_Node000078_Node000079",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node79 [id="Node000079",label="original::chain\< opts \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1chain.html",tooltip=" "];
  Node44 [id="Node000044",label="original::comparable\l\< iterationStream\< TYPE,\l array\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node44 -> Node43 [id="edge54_Node000044_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="original::iterationStream\l\< TYPE, array\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node43 -> Node42 [id="edge55_Node000043_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="original::array\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1array.html",tooltip="A fixed-size array container with random access."];
  Node61 [id="Node000061",label="original::comparable\l\< iterationStream\< TYPE,\l blocksList\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node61 -> Node46 [id="edge56_Node000061_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="original::iterationStream\l\< TYPE, blocksList\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node46 -> Node47 [id="edge57_Node000046_Node000047",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="original::blocksList\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1blocks_list.html",tooltip="A block-based list implementation."];
  Node53 [id="Node000053",label="original::comparable\l\< iterationStream\< TYPE,\l chain\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node53 -> Node50 [id="edge58_Node000053_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="original::iterationStream\l\< TYPE, chain\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node50 -> Node49 [id="edge59_Node000050_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="original::chain\< std\l::shared_ptr\< original\l::filter\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1chain.html",tooltip=" "];
  Node50 -> Node51 [id="edge60_Node000050_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="original::chain\< std\l::shared_ptr\< original\l::transform\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1chain.html",tooltip=" "];
  Node50 -> Node52 [id="edge61_Node000050_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="original::chain\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1chain.html",tooltip="Non-cyclic doubly linked list container."];
  Node63 [id="Node000063",label="original::comparable\l\< iterationStream\< TYPE,\l DERIVED \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node63 -> Node62 [id="edge62_Node000063_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="original::iterationStream\l\< TYPE, DERIVED \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip="A stream class that allows iteration, comparison, and printing."];
  Node60 [id="Node000060",label="original::comparable\l\< iterationStream\< TYPE,\l forwardChain\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node60 -> Node59 [id="edge63_Node000060_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="original::iterationStream\l\< TYPE, forwardChain\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node59 -> Node58 [id="edge64_Node000059_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="original::forwardChain\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1forward_chain.html",tooltip="A singly linked list implementation."];
  Node57 [id="Node000057",label="original::comparable\l\< iterationStream\< TYPE,\l vector\< TYPE \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node57 -> Node55 [id="edge65_Node000057_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="original::iterationStream\l\< TYPE, vector\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node55 -> Node54 [id="edge66_Node000055_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="original::vector\< TYPE * \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1vector.html",tooltip=" "];
  Node55 -> Node56 [id="edge67_Node000055_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="original::vector\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1vector.html",tooltip="Dynamic array container with amortized constant time operations."];
  Node76 [id="Node000076",label="original::comparable\l\< iterationStream\< underlying\l_type, array\< underlying_type \> \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node76 -> Node71 [id="edge68_Node000076_Node000071",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node71 [id="Node000071",label="original::iterationStream\l\< underlying_type, array\l\< underlying_type \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iteration_stream.html",tooltip=" "];
  Node71 -> Node72 [id="edge69_Node000071_Node000072",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="original::array\< underlying\l_type \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1array.html",tooltip=" "];
  Node94 [id="Node000094",label="original::comparable\l\< iterator\< bool \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node94 -> Node2 [id="edge70_Node000094_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="original::comparable\l\< iterator\< TYPE \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node17 -> Node5 [id="edge71_Node000017_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node92 [id="Node000092",label="original::comparable\l\< tuple\< TYPES... \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1comparable.html",tooltip=" "];
  Node92 -> Node91 [id="edge72_Node000092_Node000091",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node91 [id="Node000091",label="original::tuple\< TYPES \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1tuple.html",tooltip="A fixed-size heterogeneous container that stores elements of different types."];
  Node34 [id="Node000034",label="original::container\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container.html",tooltip="Abstract base class for containers."];
  Node34 -> Node29 [id="edge73_Node000034_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node35 [id="edge74_Node000034_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node38 [id="edge75_Node000034_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node40 [id="edge76_Node000034_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="original::serial\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1serial.html",tooltip="Abstract base class for sequential containers with index-based access."];
  Node40 -> Node41 [id="edge77_Node000040_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="original::baseArray\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_array.html",tooltip="Base class for fixed-size serial containers."];
  Node41 -> Node42 [id="edge78_Node000041_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 -> Node48 [id="edge79_Node000040_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="original::baseList\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_list.html",tooltip="Base class for variable-size serial containers."];
  Node48 -> Node49 [id="edge80_Node000048_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node51 [id="edge81_Node000048_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node54 [id="edge82_Node000048_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node47 [id="edge83_Node000048_Node000047",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node52 [id="edge84_Node000048_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node58 [id="edge85_Node000048_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node56 [id="edge86_Node000048_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node68 [id="Node000068",label="original::container\l\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container.html",tooltip=" "];
  Node68 -> Node67 [id="edge87_Node000068_Node000067",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="original::serial\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1serial.html",tooltip=" "];
  Node67 -> Node66 [id="edge88_Node000067_Node000066",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="original::baseArray\l\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_array.html",tooltip=" "];
  Node66 -> Node65 [id="edge89_Node000066_Node000065",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node82 [id="Node000082",label="original::container\l\< opts \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container.html",tooltip=" "];
  Node82 -> Node81 [id="edge90_Node000082_Node000081",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node81 [id="Node000081",label="original::serial\< opts \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1serial.html",tooltip=" "];
  Node81 -> Node80 [id="edge91_Node000081_Node000080",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node80 [id="Node000080",label="original::baseList\l\< opts \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_list.html",tooltip=" "];
  Node80 -> Node79 [id="edge92_Node000080_Node000079",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node75 [id="Node000075",label="original::container\l\< underlying_type \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1container.html",tooltip=" "];
  Node75 -> Node74 [id="edge93_Node000075_Node000074",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node74 [id="Node000074",label="original::serial\< underlying\l_type \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1serial.html",tooltip=" "];
  Node74 -> Node73 [id="edge94_Node000074_Node000073",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node73 [id="Node000073",label="original::baseArray\l\< underlying_type \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1base_array.html",tooltip=" "];
  Node73 -> Node72 [id="edge95_Node000073_Node000072",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="original::iterable\l\< TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterable.html",tooltip="A base class for iterable containers that support iterators."];
  Node45 -> Node43 [id="edge96_Node000045_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 -> Node46 [id="edge97_Node000045_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 -> Node50 [id="edge98_Node000045_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 -> Node59 [id="edge99_Node000045_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 -> Node55 [id="edge100_Node000045_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 -> Node62 [id="edge101_Node000045_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node70 [id="Node000070",label="original::iterable\l\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterable.html",tooltip=" "];
  Node70 -> Node64 [id="edge102_Node000070_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node84 [id="Node000084",label="original::iterable\l\< opts \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterable.html",tooltip=" "];
  Node84 -> Node78 [id="edge103_Node000084_Node000078",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node77 [id="Node000077",label="original::iterable\l\< underlying_type \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1iterable.html",tooltip=" "];
  Node77 -> Node71 [id="edge104_Node000077_Node000071",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="original::printable",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1printable.html",tooltip="Base class providing polymorphic string conversion capabilities."];
  Node18 -> Node19 [id="edge105_Node000018_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node21 [id="edge106_Node000018_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node25 [id="edge107_Node000018_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node29 [id="edge108_Node000018_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node35 [id="edge109_Node000018_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node43 [id="edge110_Node000018_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node64 [id="edge111_Node000018_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node46 [id="edge112_Node000018_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node50 [id="edge113_Node000018_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node59 [id="edge114_Node000018_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node55 [id="edge115_Node000018_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node71 [id="edge116_Node000018_Node000071",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node78 [id="edge117_Node000018_Node000078",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node2 [id="edge118_Node000018_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node85 [id="edge119_Node000018_Node000085",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node38 [id="edge120_Node000018_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node89 [id="edge121_Node000018_Node000089",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node62 [id="edge122_Node000018_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node5 [id="edge123_Node000018_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node91 [id="edge124_Node000018_Node000091",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node93 [id="edge125_Node000018_Node000093",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node93 [id="Node000093",label="original::wrapper\<\l TYPE \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classoriginal_1_1wrapper.html",tooltip="Base class for linked value containers with formatted output."];
}
