digraph "src/core/algorithms.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="src/core/algorithms.h",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Standard algorithm implementations for iterator-based containers."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="functional",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="cmath",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="vector.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$vector_8h.html",tooltip="Dynamic array container with automatic resizing."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="baseList.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_list_8h.html",tooltip="Provides a base class for variable-size serial containers."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="serial.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$serial_8h.html",tooltip="Defines an abstract base class for sequential containers with index-based access."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="container.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$container_8h.html",tooltip="Abstract base class for container types."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="config.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$config_8h.html",tooltip="Platform-independent integer type definitions."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="cstdint",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node4 -> Node10 [id="edge9_Node000004_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="iterationStream.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iteration_stream_8h.html",tooltip="Provides functionality for an iteration stream."];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="sstream",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node10 -> Node12 [id="edge11_Node000010_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="comparable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$comparable_8h.html",tooltip="Interface for objects that can be compared."];
  Node12 -> Node8 [id="edge12_Node000012_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node13 [id="edge13_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="compare",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node10 -> Node14 [id="edge14_Node000010_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="printable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$printable_8h.html",tooltip="Interface for polymorphic string formatting and output."];
  Node14 -> Node15 [id="edge15_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="memory",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node14 -> Node11 [id="edge16_Node000014_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node16 [id="edge17_Node000010_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="iterable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iterable_8h.html",tooltip="Base interface for iterable container types."];
  Node16 -> Node17 [id="edge18_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="transform.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$transform_8h.html",tooltip="Transformation classes for various operations on elements."];
  Node17 -> Node5 [id="edge19_Node000017_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node18 [id="edge20_Node000017_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="cloneable.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$cloneable_8h.html",tooltip="Abstract base class for cloneable objects."];
  Node17 -> Node19 [id="edge21_Node000017_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="maths.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$maths_8h.html",tooltip="Mathematical utilities and constants."];
  Node19 -> Node20 [id="edge22_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="error.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$error_8h.html",tooltip="Custom exception classes and callback validation utilities."];
  Node20 -> Node21 [id="edge23_Node000020_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="exception",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node20 -> Node22 [id="edge24_Node000020_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="types.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$types_8h.html",tooltip="Type system foundations and concept definitions."];
  Node22 -> Node23 [id="edge25_Node000022_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="type_traits",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node22 -> Node24 [id="edge26_Node000022_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="concepts",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node16 -> Node22 [id="edge27_Node000016_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node16 -> Node25 [id="edge28_Node000016_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="iterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$iterator_8h.html",tooltip="Defines the iterator class for traversing and manipulating container elements."];
  Node25 -> Node18 [id="edge29_Node000025_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node12 [id="edge30_Node000025_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node20 [id="edge31_Node000025_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node14 [id="edge32_Node000025_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node22 [id="edge33_Node000010_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node4 -> Node26 [id="edge34_Node000004_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="array.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$array_8h.html",tooltip="Provides the array class for a fixed-size container with random access."];
  Node26 -> Node27 [id="edge35_Node000026_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="initializer_list",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node26 -> Node8 [id="edge36_Node000026_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node28 [id="edge37_Node000026_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="baseArray.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_array_8h.html",tooltip="Provides a base class for fixed-size serial containers."];
  Node28 -> Node6 [id="edge38_Node000028_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node10 [id="edge39_Node000026_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node29 [id="edge40_Node000026_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="randomAccessIterator.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$random_access_iterator_8h.html",tooltip="Base class for random-access iterators."];
  Node29 -> Node7 [id="edge41_Node000029_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node20 [id="edge42_Node000029_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node25 [id="edge43_Node000029_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node30 [id="edge44_Node000029_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="limits",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node26 -> Node20 [id="edge45_Node000026_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node31 [id="edge46_Node000001_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="filter.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$filter_8h.html",tooltip="Filter base class and derived filter classes for various matching operations."];
  Node31 -> Node18 [id="edge47_Node000031_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node25 [id="edge48_Node000001_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge49_Node000001_Node000022",color="steelblue1",style="solid",tooltip=" "];
}
